/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Yal2jvm.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;
  STATIC = false;
                         
                        
               
                                      
}

PARSER_BEGIN(Yal2jvm)
package yal2jvm;
import custom.Logger;

public class Yal2jvm/*@bgen(jjtree)*/implements Yal2jvmTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTYal2jvmState jjtree = new JJTYal2jvmState();

/*@egen*/
  static final Logger LOGGER = Logger.INSTANCE;
  private void jjtreeOpenNodeScope(Node n)
  {
    ((SimpleNode)n).setLineNumber(getToken(1).beginLine);
  } 

  private void jjtreeCloseNodeScope(Node n)
  {
    //closeNodeHook();
  }

  void error_skipto(int kind)
{
  Token t;
  do
  {
    if (kind != RCHAVETA && token.next != null && token.next.kind == RCHAVETA) 
    break;
    t = getNextToken();
  }
  while (t.kind != kind);
}
}

PARSER_END(Yal2jvm)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
}

TOKEN : /* IDENTIFIERS */
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

SimpleNode Start()         :
{/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  < MODULE > jjtn000.jjtToken = < ID > < LCHAVETA >
  (
    try
    {
      Declaration()
    }
    catch (ParseException e)
    {
      LOGGER.error(e);
      error_skipto(PVIRG);
    }
  )*
  (
    try
    {
      Function()
    }
    catch (ParseException e)
    {
      LOGGER.error(e);
      error_skipto(PVIRG);
    }
  )*
  try
  {
    < RCHAVETA > 
    < EOF >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(EOF);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Declaration()       :
{
  SimpleNode element;
}
{
  Element()
  (
    < ASSIGN >/*@bgen(jjtree) #Declare( 2) */
    {
      ASTDeclare jjtn002 = new ASTDeclare(JJTDECLARE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (/*@bgen(jjtree) Array */
      {
        ASTArray jjtn001 = new ASTArray(JJTARRAY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/
      Array()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/       
    | Integer()
  )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/            
)?
< PVIRG >
}

void Integer() :
{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token signToken;
  String sign = "";
  Token valueToken;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  (signToken = < ADDSUB_OP >
  {
    sign = signToken.image;
  }
  )? valueToken = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.value = sign;
  	jjtn000.jjtToken = valueToken;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Array()       :
{}
{
  "[" ArraySize() "]"
}

void ArraySize()       :
{}
{
  ScalarAccess()
|/*@bgen(jjtree) Integer */
  {
    ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ jjtn001.jjtToken = < INTEGER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/         
}

void Function() :
{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  SimpleNode aVar;
  Token functionId = null;
  boolean returnValueIsAnArray = false;
}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  try
  {
    < FUNCTION >
    functionId = < ID >/*@bgen(jjtree) Return */
    {
      ASTReturn jjtn003 = new ASTReturn(JJTRETURN);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/ 
    (
    [
      "[" "]"/*@bgen(jjtree) ArrayVariable */
      {
        ASTArrayVariable jjtn001 = new ASTArrayVariable(JJTARRAYVARIABLE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
      }
/*@egen*/
      {
        aVar = jjtn001;
        returnValueIsAnArray = true;
        {
          jjtn001.jjtToken = functionId;
        }	
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
                    
    ]/*@bgen(jjtree) #ScalarVariable( ! returnValueIsAnArray) */
    {
      ASTScalarVariable jjtn002 = new ASTScalarVariable(JJTSCALARVARIABLE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (< ASSIGN >
    {
      jjtn002.jjtToken = functionId;
    }
    functionId = < ID >
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  ! returnValueIsAnArray);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/ 
                                          
    ) ?/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/ 
            Parameters() < LCHAVETA >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
  }
  try
  {
    Stmtlst()
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
  }
  < RCHAVETA >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.jjtToken = functionId;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Parameters() :
{/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameters */
  try {
/*@egen*/
  < LPAR >
  [
    Element()
    (
      < VIRG > 
      Element()
    )*
  ]
  < RPAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Element()       : //Array or scalar element
{
  Token tokenId;
  boolean isNotArray = true;
}
{
  tokenId = < ID > ("[" "]"/*@bgen(jjtree) ArrayVariable */
  {
    ASTArrayVariable jjtn001 = new ASTArrayVariable(JJTARRAYVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
  }
/*@egen*/
  {
    jjtn001.jjtToken = tokenId;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
                
  {
    isNotArray = false;
  }
  )?/*@bgen(jjtree) #ScalarVariable( isNotArray) */
  {
    ASTScalarVariable jjtn002 = new ASTScalarVariable(JJTSCALARVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  isNotArray);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/
  {
    jjtn002.jjtToken = tokenId;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  isNotArray);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/
                             
}

void Stmtlst()             :
{/*@bgen(jjtree) Statements */
  ASTStatements jjtn000 = new ASTStatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
  try {
/*@egen*/
  (
    Stmt()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Stmt()       :
{}
{
  While()
| If()
  //| Assign()
  //| Call() < PVIRG >
| try
  {
    StmtCallOrAssign() < PVIRG >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(PVIRG);
  }
}

//a.size = 20; // what is the semantic of this? - I am removing it from grammar
void StmtCallOrAssign()       :
{
  Token id;
  Token module;
  boolean isNotAnArray = true;
  boolean isNotInModule = true;
  SimpleNode node;
}
{
  (id = < ID >)
  (
    (
      Index()/*@bgen(jjtree) #ArrayAccess( 1) */
      {
        ASTArrayAccess jjtn001 = new ASTArrayAccess(JJTARRAYACCESS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
      }
/*@egen*/
      {
        jjtn001.jjtToken = id;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
                     
    {
      isNotAnArray = false;
    }
  )?/*@bgen(jjtree) #Variable( isNotAnArray) */
  {
    ASTVariable jjtn002 = new ASTVariable(JJTVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  isNotAnArray);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/
  {
    jjtn002.jjtToken = id;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  isNotAnArray);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/
                         
< ASSIGN >/*@bgen(jjtree) #Assign( 2) */
           {
             ASTAssign jjtn003 = new ASTAssign(JJTASSIGN);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
             jjtreeOpenNodeScope(jjtn003);
           }
           try {
/*@egen*/ Rhs()/*@bgen(jjtree)*/
           } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               throw (RuntimeException)jjte003;
             }
             if (jjte003 instanceof ParseException) {
               throw (ParseException)jjte003;
             }
             throw (Error)jjte003;
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
               jjtreeCloseNodeScope(jjtn003);
             }
           }
/*@egen*/           
|
(
  "."/*@bgen(jjtree) Variable */
  {
    ASTVariable jjtn004 = new ASTVariable(JJTVARIABLE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
    jjtreeCloseNodeScope(jjtn004);
  }
/*@egen*/
  {
    node = jjtn004;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*/
            module = < ID >/*@bgen(jjtree) #ModuleAccess( 1) */
  {
    ASTModuleAccess jjtn005 = new ASTModuleAccess(JJTMODULEACCESS);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn005,  1);
    jjtc005 = false;
    jjtreeCloseNodeScope(jjtn005);
  }
/*@egen*/
  {
    node.jjtToken = module;
    jjtn005.jjtToken = id;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  1);
      jjtreeCloseNodeScope(jjtn005);
    }
  }
/*@egen*/
                  
{
  isNotInModule = false;
}

)?/*@bgen(jjtree) #Variable( isNotInModule) */
{
  ASTVariable jjtn006 = new ASTVariable(JJTVARIABLE);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
  jjtreeOpenNodeScope(jjtn006);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn006,  isNotInModule);
  jjtc006 = false;
  jjtreeCloseNodeScope(jjtn006);
}
/*@egen*/
{
  jjtn006.jjtToken = id;
}/*@bgen(jjtree)*/
} finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006,  isNotInModule);
    jjtreeCloseNodeScope(jjtn006);
  }
}
/*@egen*/

                        /*@bgen(jjtree) #Call( 2) */
{
  ASTCall jjtn007 = new ASTCall(JJTCALL);
  boolean jjtc007 = true;
  jjtree.openNodeScope(jjtn007);
  jjtreeOpenNodeScope(jjtn007);
}
try {
/*@egen*/
ArgumentList()/*@bgen(jjtree)*/
} catch (Throwable jjte007) {
  if (jjtc007) {
    jjtree.clearNodeScope(jjtn007);
    jjtc007 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte007 instanceof RuntimeException) {
    throw (RuntimeException)jjte007;
  }
  if (jjte007 instanceof ParseException) {
    throw (ParseException)jjte007;
  }
  throw (Error)jjte007;
} finally {
  if (jjtc007) {
    jjtree.closeNodeScope(jjtn007,  2);
    jjtreeCloseNodeScope(jjtn007);
  }
}
/*@egen*/         
)
}

void Assign()       :
{}
{
  Access() < ASSIGN > Rhs() < PVIRG >
}

void Rhs()       :
{
  Token operator;
}
{
  
  (	
    Term()
   [
      (
        operator = < ARITH_OP >
      | operator = < BITWISE_OP >
      | operator = < ADDSUB_OP >
      )
      Term()/*@bgen(jjtree) #Operator( 2) */
      {
        ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
      }
/*@egen*/
      {
        jjtn001.jjtToken = operator;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/
                  
  ]
)
|/*@bgen(jjtree) #Array( 1) */
  {
    ASTArray jjtn002 = new ASTArray(JJTARRAY);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ Array()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/          
}

void Term()      :
{
  Token sign = null;
}
{
  (sign = < ADDSUB_OP >
  )?/*@bgen(jjtree) #Negation( sign != null && sign . image . equals ( "-" )) */
  {
    ASTNegation jjtn002 = new ASTNegation(JJTNEGATION);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (
    (/*@bgen(jjtree) Integer */
      {
        ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/
      jjtn001.jjtToken = < INTEGER >/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/         
    | CallOrAccess()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  sign != null && sign . image . equals ( "-" ));
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/
  {
    jjtn002.jjtToken = sign;
  }
)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  sign != null && sign . image . equals ( "-" ));
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/                                                  
}

void CallOrAccess()       :
{
  SimpleNode thisNode;
  Token module;
  Token idToken;
}
{
  (    (/*@bgen(jjtree) Variable */
    {
      ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (jjtn001.jjtToken = < ID >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
      idToken = jjtn001.jjtToken;
      thisNode = jjtn001;
    } 
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/         )
  (/*@bgen(jjtree) #Call( 2) */
    {
      ASTCall jjtn002 = new ASTCall(JJTCALL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ArgumentList()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/         
| "."
  (
    (/*@bgen(jjtree) #Module( 1) */
      {
        ASTModule jjtn003 = new ASTModule(JJTMODULE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
      }
      try {
/*@egen*/
      (module = < ID >/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn003,  1);
        jjtc003 = false;
        jjtreeCloseNodeScope(jjtn003);
      }
/*@egen*/
      {
        jjtn003.jjtToken = thisNode.jjtToken;
        thisNode.jjtToken = module;
      }
      )/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
          jjtreeCloseNodeScope(jjtn003);
        }
      }
/*@egen*/           
  )/*@bgen(jjtree) #Call( 2) */
  {
    ASTCall jjtn004 = new ASTCall(JJTCALL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/
  ArgumentList()/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  2);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*/         
|/*@bgen(jjtree) #Sizeof( 1) */
  {
    ASTSizeof jjtn005 = new ASTSizeof(JJTSIZEOF);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*/ < SIZE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  1);
      jjtreeCloseNodeScope(jjtn005);
    }
  }
/*@egen*/           
)
|
(
  Index()/*@bgen(jjtree) #ArrayAccess( 2) */
  {
    ASTArrayAccess jjtn006 = new ASTArrayAccess(JJTARRAYACCESS);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn006,  2);
    jjtc006 = false;
    jjtreeCloseNodeScope(jjtn006);
  }
/*@egen*/
  {
    jjtn006.jjtToken = idToken;
    jjtn006.children = new Node[]{ jjtn006.children[1] };
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  2);
      jjtreeCloseNodeScope(jjtn006);
    }
  }
/*@egen*/
                  //in fact it is (1)
)
)?)
}

void Exprtest()               :
{/*@bgen(jjtree) #Condition( 2) */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Condition( 2) */
  try {
/*@egen*/
  < LPAR >
  Access() jjtn000.jjtToken = < RELA_OP > Rhs() < RPAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void While() :
{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  try
  {
    < WHILE > Exprtest() < LCHAVETA >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
  }
  try
  {
    Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void If() :
{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  try
  {
    < IF > Exprtest() < LCHAVETA >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
  }
  try
  {
    Stmtlst() < RCHAVETA >
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
  }
  (
    try
    {
      < ELSE > < LCHAVETA >
    }
    catch (ParseException e)
    {
      LOGGER.error(e);
      error_skipto(LCHAVETA);
    }
    try
    {
      Stmtlst() < RCHAVETA >
    }
    catch (ParseException e)
    {
      LOGGER.error(e);
      error_skipto(RCHAVETA);
    }
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Call()       :
{}
{
  < ID > ("." < ID >)? 
  ArgumentList()
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/
  try
  {
    < LPAR >
    [
      Argument() 
      (
      < VIRG > Argument()
      ) *
    ]
  }
  catch (ParseException e)
  {
    LOGGER.error(e);
    error_skipto(RPAR);
  }
  < RPAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Argument()       :
{}
{
  (/*@bgen(jjtree) Variable */
    {
      ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    jjtn001.jjtToken = < ID >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/          
  |/*@bgen(jjtree) String */
    {
      ASTString jjtn002 = new ASTString(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/ jjtn002.jjtToken = < STRING >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) Integer */
    {
      ASTInteger jjtn003 = new ASTInteger(JJTINTEGER);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/ jjtn003.jjtToken = < INTEGER >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
    }
/*@egen*/         
  )
}

void Access()       : //Array or scalar access
{
  Token idToken;
  boolean isAnId = true;
}
{
  idToken = < ID >/*@bgen(jjtree) #Variable( isAnId) */
  {
    ASTVariable jjtn004 = new ASTVariable(JJTVARIABLE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/
  (    (
    {
      isAnId = false;
    }
    "."/*@bgen(jjtree) Variable */
    {
      ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
      jjtn001.jjtToken = idToken;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
             /*@bgen(jjtree) #Sizeof( 1) */
              {
                ASTSizeof jjtn002 = new ASTSizeof(JJTSIZEOF);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
              }
              try {
/*@egen*/ < SIZE >/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  1);
                  jjtreeCloseNodeScope(jjtn002);
                }
              }
/*@egen*/           
| Index()/*@bgen(jjtree) #ArrayAccess( 1) */
  {
    ASTArrayAccess jjtn003 = new ASTArrayAccess(JJTARRAYACCESS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003,  1);
    jjtc003 = false;
    jjtreeCloseNodeScope(jjtn003);
  }
/*@egen*/
  {
    jjtn003.jjtToken = idToken;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  1);
      jjtreeCloseNodeScope(jjtn003);
    }
  }
/*@egen*/
                 
)?/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn004,  isAnId);
  jjtc004 = false;
  jjtreeCloseNodeScope(jjtn004);
}
/*@egen*/
{
  jjtn004.jjtToken = idToken;
})/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  isAnId);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*/                 
}

void ScalarAccess()       :
{
  Token idToken;
}
{
  (idToken = < ID >/*@bgen(jjtree) Variable */
  {
    ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
  }
/*@egen*/
  {
    jjtn001.jjtToken = idToken;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/
           ) 
  [ 
  "."/*@bgen(jjtree) #Sizeof( 1) */
      {
        ASTSizeof jjtn002 = new ASTSizeof(JJTSIZEOF);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      }
      try {
/*@egen*/ < SIZE >/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
/*@egen*/           
]
}

void Index() :
{/*@bgen(jjtree) Index */
  ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Index */
  try {
/*@egen*/
  "["
  (
    jjtn000.jjtToken = < ID >
  | jjtn000.jjtToken = < INTEGER >
  )
  "]"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

//JAVACODE 
//void error_skipto(int kind)
//{
//  Token t;
//  do
//  {
//    if (kind != RCHAVETA && token.next != null && token.next.kind == RCHAVETA) 
//    break;
//    t = getNextToken();
//  }
//  while (t.kind != kind);
//}
