/* Generated By:JJTree: Do not edit this line. ASTFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package yal2jvm;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import custom.ASTWithName;
import custom.Scope;
import custom.Types;

public class ASTFunction extends SimpleNode {

	private Scope localScope = new Scope();
	private Scope globalScope;
	
	
	
	String name;
	
	private void assignVariable(ASTAssign node) throws ParseException {
		String variableName = ((ASTVariable) node.jjtGetChild(0)).name;
		SimpleNode assignmentNode = (SimpleNode)node.jjtGetChild(1);
		
		checkAccessedVariables(assignmentNode);
		
		if(globalScope.variables().containsKey(variableName))
		{
			SimpleNode oldNode = globalScope.variables().get(variableName);
			if(oldNode != null)
				assignmentNode.type = oldNode.type;
			globalScope.variables().put(variableName, assignmentNode);
		}
		else{
			SimpleNode oldNode = localScope.variables().get(variableName);
			if(oldNode != null){
				assignmentNode.type = oldNode.type;}
			localScope.variables().put(variableName, assignmentNode);
		}
		
		
		//putVariable(variableName); // checking if it is initialized
		
		//Node child = node.jjtGetChild(1);
//		if (ASTArray.class.equals(child.getClass())){
//			((ASTArray)child).decompose(scope);
//		}
		//scope.variables().put(variableName, (SimpleNode) node.jjtGetChild(1));
	}
	
	private void checkAccessedVariables(SimpleNode node) throws ParseException{
		Class<?> clazz = node.getClass();
		if(clazz.equals(ASTVariable.class))
		{
			String name = ((ASTVariable)node).name;
			System.out.println(name + node);
			SimpleNode variable = localScope.variables().get(name);
			if(variable == null)
				variable = globalScope.variables().get(name);
			if(variable == null)
				throw new ParseException();
			return;
		} else if(clazz.equals(ASTArrayAccess.class)){
			String name = ((ASTArrayAccess)node).name;
			SimpleNode variable = localScope.variables().get(name);
			if(variable == null)
				variable = globalScope.variables().get(name);
			if(variable == null)
				throw new ParseException();
			else if(!variable.type.equals(Types.ARRAY)){
				System.out.println(variable.type + " " + variable);
				throw new ParseException("incorrect type "+variable);
			}
			return;
		} else if(clazz.equals(ASTSizeof.class)){
			
		}
	    if (node.children != null) {
	      for (Node n : node.children) 
	    	  checkAccessedVariables((SimpleNode)n);
	    } 
	}


	
	private HashMap<Class<? extends SimpleNode>, CheckedConsumer<SimpleNode>> mapper = new HashMap<>();
	{
		mapper.put(ASTAssign.class, n -> assignVariable((ASTAssign)n));
	}
	
	public void init(Scope globalScope) throws ParseException{
		this.globalScope = globalScope.copy();
		ASTReturn astReturn = (ASTReturn)jjtGetChild(0);
		ASTParameters astParameters = (ASTParameters)jjtGetChild(1);
		ASTStatements astStatements = (ASTStatements)jjtGetChild(2);
		
		System.out.println(astParameters);
		
		if(astStatements.children != null)
		for(Node p : astStatements.children){
			CheckedConsumer<SimpleNode> action = mapper.get(p.getClass());
			if(action != null) //TODO: remove
				action.apply((SimpleNode)p);
		}
	}
	
	public ASTFunction(int id) {
		super(id);
	}

	public ASTFunction(Yal2jvm p, int id) {
		super(p, id);
	}

}
/*
 * JavaCC - OriginalChecksum=3b8243a2bf0f3ac2485156e6f9c97f83 (do not edit this
 * line)
 */
