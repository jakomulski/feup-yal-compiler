/* Generated By:JJTree&JavaCC: Do not edit this line. Yal2jvm.java */
package jjtree;
import jjtree.SimpleNode;
import yal2jvm.common.Logger;
import jjtree.SimpleNode;

public class Yal2jvm/*@bgen(jjtree)*/implements Yal2jvmTreeConstants, Yal2jvmConstants {/*@bgen(jjtree)*/
  protected JJTYal2jvmState jjtree = new JJTYal2jvmState();static final Logger LOGGER = Logger.getInstance();
  private void jjtreeOpenNodeScope(Node n)
  {
    ((SimpleNode)n).setLineNumber(getToken(1).beginLine);
  }

  private void jjtreeCloseNodeScope(Node n)
  {
    //closeNodeHook();
  }

  void error_skipto(int kind)
{
  Token t;
  do
  {
    if (kind != RCHAVETA && token.next != null && token.next.kind == RCHAVETA)
    break;
    t = getNextToken();
  }
  while (t.kind != kind);
}

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      jjtn000.jjtToken = jj_consume_token(ID);
      jj_consume_token(LCHAVETA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        try {
          Declaration();
        } catch (ParseException e) {
      LOGGER.error(e);
      error_skipto(PVIRG);
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        try {
          Function();
        } catch (ParseException e) {
      LOGGER.error(e);
      error_skipto(PVIRG);
        }
      }
      try {
        jj_consume_token(RCHAVETA);
        jj_consume_token(0);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(EOF);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Declaration() throws ParseException {
  SimpleNode element;
    Element();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      SimpleNode jjtn002 = new SimpleNode(JJTDECLARE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
        SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
          try {
            Array();
          } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
          } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
          }
          break;
        case ADDSUB_OP:
        case INTEGER:
          Integer();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtreeCloseNodeScope(jjtn002);
      }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(PVIRG);
  }

  final public void Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token signToken;
  String sign = "";
  Token valueToken;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        signToken = jj_consume_token(ADDSUB_OP);
    sign = signToken.image;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      valueToken = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.value = sign;
        jjtn000.jjtToken = valueToken;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Array() throws ParseException {
    jj_consume_token(31);
    ArraySize();
    jj_consume_token(32);
  }

  final public void ArraySize() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ScalarAccess();
      break;
    case INTEGER:
    SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jjtn001.jjtToken = jj_consume_token(INTEGER);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Function() throws ParseException {
 /*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);SimpleNode aVar;
  Token functionId = null;
  boolean returnValueIsAnArray = false;
    try {
      try {
        jj_consume_token(FUNCTION);
        functionId = jj_consume_token(ID);
      SimpleNode jjtn003 = new SimpleNode(JJTRETURN);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
          case 31:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 31:
              jj_consume_token(31);
              jj_consume_token(32);
        SimpleNode jjtn001 = new SimpleNode(JJTARRAYVARIABLE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
              try {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
        aVar = jjtn001;
        returnValueIsAnArray = true;
        {
          jjtn001.jjtToken = functionId;
        }
              } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
              }
              break;
            default:
              jj_la1[6] = jj_gen;
              ;
            }
      SimpleNode jjtn002 = new SimpleNode(JJTSCALARVARIABLE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
            try {
              jj_consume_token(ASSIGN);
      jjtn002.jjtToken = functionId;
              functionId = jj_consume_token(ID);
            } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  ! returnValueIsAnArray);
        jjtreeCloseNodeScope(jjtn002);
      }
            }
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
        }
        Parameters();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
      }
      try {
        Stmtlst();
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
      }
      jj_consume_token(RCHAVETA);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtToken = functionId;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Parameters() throws ParseException {
 /*@bgen(jjtree) Parameters */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Element();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRG:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          jj_consume_token(VIRG);
          Element();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Element() throws ParseException {
  Token tokenId;
  boolean isNotArray = true;
    tokenId = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      jj_consume_token(32);
    SimpleNode jjtn001 = new SimpleNode(JJTARRAYVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.jjtToken = tokenId;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    isNotArray = false;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    SimpleNode jjtn002 = new SimpleNode(JJTSCALARVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
    try {
    jjtree.closeNodeScope(jjtn002,  isNotArray);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
    jjtn002.jjtToken = tokenId;
    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  isNotArray);
      jjtreeCloseNodeScope(jjtn002);
    }
    }
  }

  final public void Stmtlst() throws ParseException {
 /*@bgen(jjtree) Statements */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        Stmt();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      While();
      break;
    case IF:
      If();
      break;
    case ID:
      try {
        StmtCallOrAssign();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(PVIRG);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//a.size = 20; // what is the semantic of this? - I am removing it from grammar
  final public void StmtCallOrAssign() throws ParseException {
  Token id;
  Token module;
  boolean isNotAnArray = true;
  boolean isNotInModule = true;
  SimpleNode node;
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case 31:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        Index();
        SimpleNode jjtn001 = new SimpleNode(JJTARRAYACCESS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtToken = id;
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtreeCloseNodeScope(jjtn001);
        }
        }
      isNotAnArray = false;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    SimpleNode jjtn002 = new SimpleNode(JJTVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
    jjtree.closeNodeScope(jjtn002,  isNotAnArray);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
    jjtn002.jjtToken = id;
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  isNotAnArray);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
      jj_consume_token(ASSIGN);
             SimpleNode jjtn003 = new SimpleNode(JJTASSIGN);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
             jjtreeOpenNodeScope(jjtn003);
      try {
        Rhs();
      } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte003;}
             }
             if (jjte003 instanceof ParseException) {
               {if (true) throw (ParseException)jjte003;}
             }
             {if (true) throw (Error)jjte003;}
      } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
               jjtreeCloseNodeScope(jjtn003);
             }
      }
      break;
    case LPAR:
    case 33:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
    SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
        try {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
    jjtreeCloseNodeScope(jjtn004);
    node = jjtn004;
        } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
        }
        module = jj_consume_token(ID);
    SimpleNode jjtn005 = new SimpleNode(JJTMODULEACCESS);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
        try {
    jjtree.closeNodeScope(jjtn005,  1);
    jjtc005 = false;
    jjtreeCloseNodeScope(jjtn005);
    node.jjtToken = module;
    jjtn005.jjtToken = id;
        } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  1);
      jjtreeCloseNodeScope(jjtn005);
    }
        }
  isNotInModule = false;
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
  SimpleNode jjtn006 = new SimpleNode(JJTVARIABLE);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
  jjtreeOpenNodeScope(jjtn006);
      try {
  jjtree.closeNodeScope(jjtn006,  isNotInModule);
  jjtc006 = false;
  jjtreeCloseNodeScope(jjtn006);
  jjtn006.jjtToken = id;
      } finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006,  isNotInModule);
    jjtreeCloseNodeScope(jjtn006);
  }
      }
  SimpleNode jjtn007 = new SimpleNode(JJTCALL);
  boolean jjtc007 = true;
  jjtree.openNodeScope(jjtn007);
  jjtreeOpenNodeScope(jjtn007);
      try {
        ArgumentList();
      } catch (Throwable jjte007) {
  if (jjtc007) {
    jjtree.clearNodeScope(jjtn007);
    jjtc007 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte007 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte007;}
  }
  if (jjte007 instanceof ParseException) {
    {if (true) throw (ParseException)jjte007;}
  }
  {if (true) throw (Error)jjte007;}
      } finally {
  if (jjtc007) {
    jjtree.closeNodeScope(jjtn007,  2);
    jjtreeCloseNodeScope(jjtn007);
  }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Assign() throws ParseException {
    Access();
    jj_consume_token(ASSIGN);
    Rhs();
    jj_consume_token(PVIRG);
  }

  final public void Rhs() throws ParseException {
  Token operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSUB_OP:
    case INTEGER:
    case ID:
      Term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case ARITH_OP:
      case BITWISE_OP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARITH_OP:
          operator = jj_consume_token(ARITH_OP);
          break;
        case BITWISE_OP:
          operator = jj_consume_token(BITWISE_OP);
          break;
        case ADDSUB_OP:
          operator = jj_consume_token(ADDSUB_OP);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Term();
        SimpleNode jjtn001 = new SimpleNode(JJTOPERATOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtToken = operator;
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtreeCloseNodeScope(jjtn001);
        }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    case 31:
    SimpleNode jjtn002 = new SimpleNode(JJTARRAY);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
        Array();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Term() throws ParseException {
  Token sign = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSUB_OP:
      sign = jj_consume_token(ADDSUB_OP);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    SimpleNode jjtn002 = new SimpleNode(JJTNEGATION);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
          jjtn001.jjtToken = jj_consume_token(INTEGER);
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
        }
        break;
      case ID:
        CallOrAccess();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn002,  sign != null && sign . image . equals ( "-" ));
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
    jjtn002.jjtToken = sign;
    } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
    } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  sign != null && sign . image . equals ( "-" ));
      jjtreeCloseNodeScope(jjtn002);
    }
    }
  }

  final public void CallOrAccess() throws ParseException {
  SimpleNode thisNode;
  Token module;
  Token idToken;
      SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      jjtn001.jjtToken = jj_consume_token(ID);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      idToken = jjtn001.jjtToken;
      thisNode = jjtn001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case 31:
    case 33:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      SimpleNode jjtn002 = new SimpleNode(JJTCALL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
        try {
          ArgumentList();
        } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtreeCloseNodeScope(jjtn002);
      }
        }
        break;
      case 33:
        jj_consume_token(33);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        SimpleNode jjtn003 = new SimpleNode(JJTMODULEACCESS);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
          try {
            module = jj_consume_token(ID);
        jjtree.closeNodeScope(jjtn003,  1);
        jjtc003 = false;
        jjtreeCloseNodeScope(jjtn003);
        jjtn003.jjtToken = thisNode.jjtToken;
        thisNode.jjtToken = module;
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
          jjtreeCloseNodeScope(jjtn003);
        }
          }
    SimpleNode jjtn004 = new SimpleNode(JJTCALL);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
          try {
            ArgumentList();
          } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
          } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  2);
      jjtreeCloseNodeScope(jjtn004);
    }
          }
          break;
        case SIZE:
    SimpleNode jjtn005 = new SimpleNode(JJTSIZEOF);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
          try {
            jj_consume_token(SIZE);
          } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  1);
      jjtreeCloseNodeScope(jjtn005);
    }
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 31:
        Index();
    SimpleNode jjtn006 = new SimpleNode(JJTARRAYACCESS);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
        try {
    jjtree.closeNodeScope(jjtn006,  2);
    jjtc006 = false;
    jjtreeCloseNodeScope(jjtn006);
    jjtn006.jjtToken = idToken;
    jjtn006.children = new Node[]{ jjtn006.children[1] };
        } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  2);
      jjtreeCloseNodeScope(jjtn006);
    }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void Exprtest() throws ParseException {
 /*@bgen(jjtree) #Condition( 2) */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Access();
      jjtn000.jjtToken = jj_consume_token(RELA_OP);
      Rhs();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void While() throws ParseException {
 /*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        Exprtest();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
      }
      try {
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void If() throws ParseException {
 /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IF);
        Exprtest();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(LCHAVETA);
      }
      try {
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(RCHAVETA);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        try {
          jj_consume_token(ELSE);
          jj_consume_token(LCHAVETA);
        } catch (ParseException e) {
      LOGGER.error(e);
      error_skipto(LCHAVETA);
        }
        try {
          Stmtlst();
          jj_consume_token(RCHAVETA);
        } catch (ParseException e) {
      LOGGER.error(e);
      error_skipto(RCHAVETA);
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Call() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    ArgumentList();
  }

  final public void ArgumentList() throws ParseException {
 /*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          Argument();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VIRG:
              ;
              break;
            default:
              jj_la1[26] = jj_gen;
              break label_5;
            }
            jj_consume_token(VIRG);
            Argument();
          }
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
      } catch (ParseException e) {
    LOGGER.error(e);
    error_skipto(RPAR);
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Argument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jjtn001.jjtToken = jj_consume_token(ID);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
      break;
    case STRING:
      SimpleNode jjtn002 = new SimpleNode(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
        jjtn002.jjtToken = jj_consume_token(STRING);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
      }
      break;
    case INTEGER:
      SimpleNode jjtn003 = new SimpleNode(JJTINTEGER);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
      try {
        jjtn003.jjtToken = jj_consume_token(INTEGER);
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtreeCloseNodeScope(jjtn003);
      }
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Access() throws ParseException {
  Token idToken;
  boolean isAnId = true;
    idToken = jj_consume_token(ID);
    SimpleNode jjtn004 = new SimpleNode(JJTVARIABLE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
      case 33:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
      isAnId = false;
          jj_consume_token(33);
      SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
          try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.jjtToken = idToken;
          } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
          }
                SimpleNode jjtn002 = new SimpleNode(JJTSIZEOF);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(SIZE);
          } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  1);
                  jjtreeCloseNodeScope(jjtn002);
                }
          }
          break;
        case 31:
          Index();
    SimpleNode jjtn003 = new SimpleNode(JJTARRAYACCESS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
          try {
    jjtree.closeNodeScope(jjtn003,  1);
    jjtc003 = false;
    jjtreeCloseNodeScope(jjtn003);
    jjtn003.jjtToken = idToken;
          } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  1);
      jjtreeCloseNodeScope(jjtn003);
    }
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn004,  isAnId);
  jjtc004 = false;
  jjtreeCloseNodeScope(jjtn004);
  jjtn004.jjtToken = idToken;
    } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
    } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  isAnId);
      jjtreeCloseNodeScope(jjtn004);
    }
    }
  }

  final public void ScalarAccess() throws ParseException {
  Token idToken;
    idToken = jj_consume_token(ID);
    SimpleNode jjtn001 = new SimpleNode(JJTVARIABLE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
    jjtn001.jjtToken = idToken;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
        SimpleNode jjtn002 = new SimpleNode(JJTSIZEOF);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(SIZE);
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  1);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void Index() throws ParseException {
 /*@bgen(jjtree) Index */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jjtn000.jjtToken = jj_consume_token(ID);
        break;
      case INTEGER:
        jjtn000.jjtToken = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(32);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  /** Generated Token Manager. */
  public Yal2jvmTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x84000100,0x8000,0x100,0xc000000,0x80000000,0x80008000,0x80000,0x8000000,0x80000000,0x8003000,0x8003000,0x80000000,0x0,0x80028000,0x700,0x700,0x8c000100,0x100,0xc000000,0xa000000,0x80020000,0x80020000,0x4000,0x0,0x80000,0x4c000000,0x4c000000,0x80000000,0x80000000,0x0,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x0,0x0,0x2,0x2,0x2,0x0,};
   }

  /** Constructor with InputStream. */
  public Yal2jvm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yal2jvm(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Yal2jvm(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Yal2jvmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Yal2jvm(Yal2jvmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Yal2jvmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
